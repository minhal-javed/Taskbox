[{"F:\\Web Dev\\Bootcamp\\Taskbox\\taskbox\\src\\reportWebVitals.js":"1","F:\\Web Dev\\Bootcamp\\Taskbox\\taskbox\\src\\components\\Task.stories.tsx":"2","F:\\Web Dev\\Bootcamp\\Taskbox\\taskbox\\src\\components\\TaskList.stories.tsx":"3","F:\\Web Dev\\Bootcamp\\Taskbox\\taskbox\\src\\components\\TaskList.tsx":"4","F:\\Web Dev\\Bootcamp\\Taskbox\\taskbox\\src\\components\\Task.tsx":"5","F:\\Web Dev\\Bootcamp\\Taskbox\\taskbox\\src\\lib\\redux.tsx":"6","F:\\Web Dev\\Bootcamp\\Taskbox\\taskbox\\src\\components\\InboxScreen.stories.tsx":"7","F:\\Web Dev\\Bootcamp\\Taskbox\\taskbox\\src\\components\\InboxScreen.tsx":"8"},{"size":362,"mtime":1606768665508,"results":"9","hashOfConfig":"10"},{"size":1280,"mtime":1608485598896,"results":"11","hashOfConfig":"10"},{"size":1595,"mtime":1608482704317,"results":"12","hashOfConfig":"10"},{"size":1944,"mtime":1608738153039,"results":"13","hashOfConfig":"10"},{"size":1134,"mtime":1608421155363,"results":"14","hashOfConfig":"10"},{"size":1711,"mtime":1608733598674,"results":"15","hashOfConfig":"10"},{"size":894,"mtime":1608761632321,"results":"16","hashOfConfig":"10"},{"size":886,"mtime":1608742276497,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"gy2k9u",{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"24"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"24"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"35"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"24"},"F:\\Web Dev\\Bootcamp\\Taskbox\\taskbox\\src\\reportWebVitals.js",[],["41","42"],"F:\\Web Dev\\Bootcamp\\Taskbox\\taskbox\\src\\components\\Task.stories.tsx",["43"],"import React from 'react'\r\nimport {Task} from './Task'\r\n\r\n\r\nexport default {\r\n  component: Task,\r\n  title: 'Task',\r\n};\r\n\r\nconst Template = (args:any) => <Task {...args} />;\r\n\r\nexport const Default:any = Template.bind({});\r\nDefault.args = {\r\n  task: {\r\n    id: '1',\r\n    title: 'Test Task',\r\n    state: 'TASK_INBOX',\r\n    updatedAt: new Date(2018, 0, 1, 9, 0),\r\n  },\r\n};\r\n\r\nexport const Pinned:any = Template.bind({});\r\nPinned.args = {\r\n  task: {\r\n    ...Default.args.task,\r\n    state: 'TASK_PINNED',\r\n  },\r\n};\r\n\r\nexport const Archived:any = Template.bind({});\r\nArchived.args = {\r\n  task: {\r\n    ...Default.args.task,\r\n    state: 'TASK_ARCHIVED',\r\n  },\r\n};\r\n\r\n// const Template = (args: any) => <Task {...args} />;\r\n\r\n// export const Default: any = Template.bind({});\r\n\r\n// Default.args = {\r\n//   task: {\r\n//     id: \"1\",\r\n//     title: \"Test Task\",\r\n//     state: \"TASK_INBOX\",\r\n//     updatedAt: new Date(2018, 0, 1, 9, 0),\r\n//   },\r\n// };\r\n\r\n// export const Pinned: any = Template.bind({});\r\n\r\n// Pinned.args = {\r\n//   task: {\r\n//     ...Default.args.task,\r\n//     state: \"TASK_PINNED\",\r\n//   },\r\n// };\r\n\r\n// export const Archived: any = Template.bind({});\r\n\r\n// Archived.args = {\r\n//   task: {\r\n//     ...Default.args.task,\r\n//     state: \"TASK_ARCHIVED\",\r\n//   },\r\n// };\r\n\r\n\r\n",["44","45"],"F:\\Web Dev\\Bootcamp\\Taskbox\\taskbox\\src\\components\\TaskList.stories.tsx",["46"],"import React from 'react';\r\n\r\nimport {TaskList,Taskprops} from './TaskList';\r\nimport * as TaskStories from './Task.stories';\r\n\r\nexport const a= {\r\n  component: TaskList,\r\n  title: 'TaskList',\r\n  decorators: [(story:any) => <div style={{ padding: '3rem' }}>{story()}</div>],\r\n};\r\n\r\nconst Template = (args:Taskprops) => <TaskList {...args} />;\r\n\r\nexport const Default:any = Template.bind({});\r\nDefault.args = {\r\n  // Shaping the stories through args composition.\r\n  // The data was inherited from the Default story in task.stories.js.\r\n  tasks: [\r\n    { ...TaskStories.Default.args.task, id: '1', title: 'Task 1' },\r\n    { ...TaskStories.Default.args.task, id: '2', title: 'Task 2' },\r\n    { ...TaskStories.Default.args.task, id: '3', title: 'Task 3' },\r\n    { ...TaskStories.Default.args.task, id: '4', title: 'Task 4' },\r\n    { ...TaskStories.Default.args.task, id: '5', title: 'Task 5' },\r\n    { ...TaskStories.Default.args.task, id: '6', title: 'Task 6' },\r\n  ],\r\n};\r\n\r\nexport const WithPinnedTasks:any = Template.bind({});\r\nWithPinnedTasks.args = {\r\n  // Shaping the stories through args composition.\r\n  // Inherited data coming from the Default story.\r\n  tasks: [\r\n    ...Default.args.tasks.slice(0, 5),\r\n    { id: '6', title: 'Task 6 (pinned)', state: 'TASK_PINNED' },\r\n  ],\r\n};\r\n\r\nexport const Loading:any = Template.bind({});\r\nLoading.args = {\r\n  tasks: [],\r\n  loading: true,\r\n};\r\n\r\nexport const Empty:any = Template.bind({});\r\nEmpty.args = {\r\n  // Shaping the stories through args composition.\r\n  // Inherited data coming from the Loading story.\r\n  ...Loading.args,\r\n  loading: false,\r\n};","F:\\Web Dev\\Bootcamp\\Taskbox\\taskbox\\src\\components\\TaskList.tsx",[],"F:\\Web Dev\\Bootcamp\\Taskbox\\taskbox\\src\\components\\Task.tsx",[],"F:\\Web Dev\\Bootcamp\\Taskbox\\taskbox\\src\\lib\\redux.tsx",["47","48"],"import {createStore } from 'redux';\r\nimport {TaskInterface} from '../interface/Task.interface'\r\nimport {configureStore,createSlice} from '@reduxjs/toolkit';\r\n\r\nexport const actions ={\r\n    ARCHIVE_TASK:'ARCHIVE_TASK',\r\n    PIN_TASK:'PIN_TASK'\r\n};\r\n\r\nexport const archiveTask=(id:any)=>({type: actions.ARCHIVE_TASK,id })\r\nexport const pinTask=(id:any)=>({type:actions.PIN_TASK,id})\r\n\r\nfunction taskStateReducer(taskState:any){\r\n    return (state:any,action:TaskInterface)=>{\r\n        return{\r\n            ...state,\r\n            tasks:state.tasks.map((task:TaskInterface)=> \r\n             task.id === action.id ? {...task,state:taskState} : task \r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nexport const reducer = (state:any, action:any) => {\r\n    switch (action.type) {\r\n      case actions.ARCHIVE_TASK:\r\n        return taskStateReducer('TASK_ARCHIVED')(state, action);\r\n      case actions.PIN_TASK:\r\n        return taskStateReducer('TASK_PINNED')(state, action);\r\n      default:\r\n        return state;\r\n    }\r\n  };\r\n  \r\n  // The initial state of our store when the app loads.\r\n  // Usually you would fetch this from a server\r\n  const defaultTasks = [\r\n    { id: '1', title: 'Something', state: 'TASK_INBOX' },\r\n    { id: '2', title: 'Something more', state: 'TASK_INBOX' },\r\n    { id: '3', title: 'Something else', state: 'TASK_INBOX' },\r\n    { id: '4', title: 'Something again', state: 'TASK_INBOX' },\r\n  ];\r\n  \r\n  // We export the constructed redux store\r\n  export default createStore(reducer, { tasks: defaultTasks });\r\n\r\n  // const taskReducer=createSlice({\r\n  //   name:'tasks',\r\n  //   initialState:defaultTasks,\r\n  //   reducers:{\r\n  //     pinTask:(state,action)=>{\r\n\r\n  //     }\r\n  //   }\r\n  // })\r\n\r\n\r\n\r\n\r\n",["49","50"],"F:\\Web Dev\\Bootcamp\\Taskbox\\taskbox\\src\\components\\InboxScreen.stories.tsx",["51"],"F:\\Web Dev\\Bootcamp\\Taskbox\\taskbox\\src\\components\\InboxScreen.tsx",["52"],"import React from 'react';\r\n\r\nimport { connect } from 'react-redux';\r\n\r\nimport TaskList from './TaskList';\r\n\r\n\r\ninterface PureInboxProps{\r\n    error:string | null\r\n}\r\n\r\nexport const PureInboxScreen:React.FC<PureInboxProps>=({ error }) =>{\r\n  if (error) {\r\n    return (\r\n      <div className=\"page lists-show\">\r\n        <div className=\"wrapper-message\">\r\n          <span className=\"icon-face-sad\" />\r\n          <div className=\"title-message\">Oh no!</div>\r\n          <div className=\"subtitle-message\">Something went wrong</div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"page lists-show\">\r\n      <nav>\r\n        <h1 className=\"title-page\">\r\n          <span className=\"title-wrapper\">Taskbox</span>\r\n        </h1>\r\n      </nav>\r\n      <TaskList />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default connect(({ error }:PureInboxProps) => ({ error }))(PureInboxScreen);",{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","severity":1,"message":"58","line":5,"column":1,"nodeType":"59","endLine":8,"endColumn":3},{"ruleId":"53","replacedBy":"60"},{"ruleId":"55","replacedBy":"61"},{"ruleId":"57","severity":1,"message":"58","line":6,"column":1,"nodeType":"59","endLine":10,"endColumn":3},{"ruleId":"62","severity":1,"message":"63","line":3,"column":9,"nodeType":"64","messageId":"65","endLine":3,"endColumn":23},{"ruleId":"62","severity":1,"message":"66","line":3,"column":24,"nodeType":"64","messageId":"65","endLine":3,"endColumn":35},{"ruleId":"53","replacedBy":"67"},{"ruleId":"55","replacedBy":"68"},{"ruleId":"57","severity":1,"message":"58","line":19,"column":1,"nodeType":"59","endLine":23,"endColumn":2},{"ruleId":"62","severity":1,"message":"69","line":2,"column":8,"nodeType":"64","messageId":"65","endLine":2,"endColumn":17},"no-native-reassign",["70"],"no-negated-in-lhs",["71"],"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration",["70"],["71"],"@typescript-eslint/no-unused-vars","'configureStore' is defined but never used.","Identifier","unusedVar","'createSlice' is defined but never used.",["70"],["71"],"'PropTypes' is defined but never used.","no-global-assign","no-unsafe-negation"]